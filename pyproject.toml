# --- poetry ---
[tool.poetry]
name = "trackotron"
version = "0.1.0"
description = "Improved decorator for Langfuse."
license = "GPL-3.0-or-later"
authors = ["Bendabir"]
readme = "README.md"
homepage = "https://github.com/bendabir/trackotron"
repository = "https://github.com/bendabir/trackotron"
documentation = "https://github.com/Bendabir/trackotron/README.md"
keywords = ["langfuse"]
packages = [{ include = "trackotron", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.9,<4"
typing-extensions = "^4.9.0"
langfuse = ">=2,<3"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
mypy = "^1.11.2"
ruff = "^0.6.3"
black = "^24.8.0"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
pytest-randomly = "^3.15.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# --- black ---
[tool.black]
line-length = 88
target-version = ["py38"]
preview = false

# --- mypy ---
[tool.mypy]
local_partial_types = true
python_version = "3.8"
mypy_path = "src/,tests/"
scripts_are_modules = true
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
implicit_optional = false
strict_equality = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true
warn_unused_configs = true
check_untyped_defs = true
enable_error_code = [
    "explicit-override",
    "ignore-without-code",
    "possibly-undefined",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unused-awaitable",
]

[tool.pydantic-mypy]
init_typed = false
init_forbid_extra = true
warn_required_dynamic_aliases = true

# --- ruff ---
[tool.ruff]
line-length = 88
target-version = "py38"
indent-width = 4
preview = true
namespace-packages = ["src/trackotron"]

[tool.ruff.lint]
task-tags = ["TODO", "FIXME", "NOTE"]
select = [
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "CPY",   # flake8-copyright
    "D",     # pydocstyle
    "DOC",   # flake8-docstyle
    "DTZ",   # flake8-datetimez
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "NPY",   # numpy rules
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # ruff specific
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
]
ignore = ["ANN401", "COM812", "D100", "D104", "D105", "TD001", "TD002", "TD003"]
unfixable = ["ERA001"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "CPY001",

    "D101",
    "D102",
    "D103",

    "PLR2004",
    "PLR6301",

    "S101",

    "SLF001",
]

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-args = 12
max-branches = 20
max-returns = 12
max-statements = 100

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true
suppress-dummy-args = true
allow-star-arg-any = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

# --- pytest ---
[tool.pytest.ini_options]
addopts = ["--strict-markers", "--import-mode=importlib"]
filterwarnings = ["ignore::DeprecationWarning"]
testpaths = ["tests/unit"]

# --- coverage ---
[tool.coverage.run]
omit = ["tests/*", "src/**/__init__.py"]
branch = true
disable_warnings = ["no-data-collected"]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "return NotImplemented",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    "case unreachable:",
    "assert_never(.+)",
    "if TYPE_CHECKING:",
]
show_missing = true # Show missing statements lines
skip_covered = true # Don't show files that are 100% covered
skip_empty = true # Don't show files with no executable code

[tool.coverage.json]
pretty_print = true
