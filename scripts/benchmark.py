"""Copyright (c) 2024 Bendabir."""

# mypy: allow-any-unimported
# ruff: noqa: D101, D102, D103
from __future__ import annotations

import contextlib
import getpass
import os
import random
import string
import time
import timeit
from typing import TYPE_CHECKING

from langfuse.client import Langfuse

from trackotron import Observer
from trackotron._version import __version__
from trackotron.updates import GenerationUpdate

if TYPE_CHECKING:
    from trackotron.proxies import EventProxyAlias, GenerationProxyAlias, SpanProxyAlias

mode = os.environ["BENCHMARK_MODE"].lower().strip()

client = Langfuse(enabled=mode == "enabled")
observer = Observer(
    client,
    release=__version__,
    user=getpass.getuser(),
    session="".join(
        random.choices(string.ascii_letters + string.digits, k=8)  # noqa: S311
    ),
    tags=["dev", "trackotron"],
)


def mean(values: list[float]) -> float:
    return sum(values) / len(values)


@observer.observe(type_="event")
def error(_proxy: EventProxyAlias) -> None:
    raise RuntimeError("Benchmarking.")


@observer.observe(type_="generation")
def generate(
    proxy: GenerationProxyAlias,
    prompt: str,
    *,
    model: str = "gpt-4o-mini",
) -> str:
    time.sleep(1.0)

    output = "This was generated by an AI."

    proxy.update(
        GenerationUpdate(
            model=model,
            model_parameters={"MAX_SEQ_LENGTH": 512},
            usage={
                "input": len(prompt) * 1000,
                "output": len(output) * 1000,
                "total": (len(prompt) + len(output) + 2) * 1000,
                "unit": "TOKENS",
            },
        )
    )

    return output


@observer.observe()
def evaluate(proxy: SpanProxyAlias, _output: str) -> bool:
    time.sleep(0.5)

    proxy.score("perplexity", 1.0, comment="Fake metric.")
    proxy.score("toxic", False)  # noqa: FBT003
    proxy.score("sentiment", "neutral")

    return True


@observer.observe(observation={"version": "test"})
def run(_proxy: SpanProxyAlias) -> str:
    with contextlib.suppress(RuntimeError):
        error()

    output = generate("My super prompt !")

    evaluate(output)

    return output


@observer.observe()
def main(_proxy: SpanProxyAlias, *, _example: bool = True) -> None:
    run()


if __name__ == "__main__":
    durations = timeit.repeat(
        "main()",
        setup="from benchmark import main",
        repeat=20,
        number=1,
    )
    print(  # noqa: T201
        f"min:{min(durations):.4f} avg:{mean(durations):.4f} ({durations})"
    )
